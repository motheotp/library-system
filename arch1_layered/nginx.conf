events {
    worker_connections 1024;
}

http {
    # Define upstream backend servers
    upstream backend {
        # Round-robin load balancing (default)
        server backend_1:5000;
        server backend_2:5000;
    }

    # Log format to see which backend handled the request
    log_format upstreamlog '[$time_local] $remote_addr - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

    server {
        listen 80;
        server_name localhost;

        access_log /var/log/nginx/access.log upstreamlog;

        # API endpoints - proxy to Flask backend
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Don't add CORS headers here - Flask backend handles CORS
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
